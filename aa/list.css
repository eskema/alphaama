.list
{
  list-style-type: none;
  margin: 0;
  padding: 0;
  position: relative;
  transition: var(--trans-quart);
}

.item
{
  display: grid;
  grid-template-areas: "bef k v s aft";
  grid-template-columns: auto auto 1fr auto;
  padding: 0 var(--pad);
  overflow-x:  scroll;
}

.item[data-before]::before 
{
  content: attr(data-before);
  grid-area: bef;
}

.item[data-after]::after 
{
  color: rgb(var(--color-c));
  content: attr(data-after);
  grid-area: aft;
}

.item > .key
{
  color: rgb(var(--color-e));
  grid-area: k;
}

.item > .val
{
  color: rgb(var(--color-d));
  margin: 0 var(--pad);
  grid-area: v;
}

.item .sets
{
  grid-area: s;
}

.item .del
{
  color: rgb(var(--color-no));
  /* color: rgb(var(--color-a)); */
  margin-left: var(--pad);
}

.item > details
{
  overflow: hidden;
}

.item > details[open]
{
  padding-bottom: var(--pad);
}

.item > details > summary
{
  color: rgb(var(--color-e));
}

.item > details[open] > summary
{
  padding: var(--pad) 0;
}

.item > details > summary[data-count]::after,
.item.ls_arr > details > summary[data-count]::after 
{
  content: " [" attr(data-count) "]";
}

.item.ls_arr > details,
.item.ls_obj > details
{
  grid-column: 1 / -1;
}

.item.ls_obj > details > summary[data-count]::after 
{
  content: " {" attr(data-count) "}";
}

.item.ls_obj > details[open] > summary::after 
{
  font-size: var(--font-size-s);
}

.item > details > summary::after
{
  opacity: .6;
}

.item > details.empty > summary::after 
{
  content: " empty";
}

.item.empty
{
  text-decoration: line-through;
  pointer-events: none;
}

.item.out
{
  display: none;
}

.ls_arr > details > .list > .item > .key
{
  min-width: 2rem;
  text-align: right;
  user-select: none;
}

.ls_arr .list .item
{
  display: inline-block;
}

.list_filter
{
  background: none;
  border: none;
  font-family: var(--font-main);
  margin-bottom: var(--pad);
  padding: 0 var(--pad);
}

.mod .list_filter
{
  text-align: center;
}

.list_filter:focus::placeholder
{
  opacity: 0;
}

.list_filter:focus
{
  outline: none;
}

html:not(.viewing) .filtering > *:not(.filtered_in)
{
  display: none;
}